;;; Lilith Standard Library ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Atoms ----------------------------------------------------------------------

(def {nil} {})

; Function to define functions.
; (defun {function_name params...} {function_body})
(def {defun}
  (\ {args body}
    {def (head args) (\ (tail args) body)}
  )
)

;; Simple Predicates ----------------------------------------------------------

(defun {nil? x} {= x nil})
(defun {zero? x} {= x 0})
(defun {even? x} {= 0 (% x 2)})
(defun {odd? x} {not (even? x)})

;; Currying / Uncurrying ------------------------------------------------------

; Calls a function with each list member as a parameter
; (unpack + {1 2 3 4})
(defun {unpack f l} {eval (join (list f) l)})

; Calls a function with the arguments merged in to a list
; (pack head 1 2 3 4)
(defun {pack f & xs} {f xs})

; Aliases for above
(def {curry} unpack)
(def {uncurry} pack)

;; Core features --------------------------------------------------------------

; Evaluates a sequence of expressions and
; returns the result of the final one
(defun {do & l}
  {if (nil? l)
    {nil}
    {last l}
  }
)

; Defines a local variable
(defun {let b} { ((\ {_} b) ()) })

;; List functions -------------------------------------------------------------

; Returns the first, second or third item in a list
(defun {fst l} { eval (head l) })
(defun {snd l} { eval (head (tail l)) })
(defun {trd l} { eval (head (tail (tail l))) })

; Creates a q-expression of values between from (inclusive) and to (exclusive). 
(defun {range from to}
  {let
    {do
      (put {range-build}
        (\ {x y sofar}
          {if (= x y)
            {sofar}
            {range-build x (- y 1) (cons (- y 1) sofar)}
          }
        )
      )
      (range-build from to {})
    }
  }
)

; Returns the n-th item in a list
(defun {nth n l}
  {if (zero? n)
    {fst l}
    {nth (- n 1) (tail l)}
  }
)

; Returns the last item in a list
(defun {last l} {nth (- (len l) 1) l})

; Call f on each element of l
(defun {map f l}
  {if (nil? l)
    {nil}
    {join (list (f (fst l))) (map f (tail l))}
  }
)

; Filters a list. Creates new list where each value
; in l matches the predicate f.
(defun {filter f l}
  {if (nil? l)
    {nil}
    {join
      (if (f (fst l)) {head l} {nil})
      (filter f (tail l))
    }
  }
)

; Accumulate a single value from a function
; applied to all elements of a list
(defun {foldl f z l}
  {if (nil? l)
    {z}
    {foldl f (f z (fst l)) (tail l)}
  }
)

; Sum all values in a list
(defun {sum l} {foldl + 0 l})

; Get the product of a list
(defun {product l} {foldl * 1 l})

; Returns the length of a list. O(n)...
(defun {length l} {foldl (\ {x _} {+ x 1}) 0 l})

; Take n items from list l
(defun {take n l}
  {if (zero? n)
    {nil}
    {join (head l) (take (- n 1) (tail l))}
  }
)

; Drop n items from list l
(defun {drop n l}
  {if (zero? n)
    {l}
    {drop (- n 1) (tail l)}
  }
)

; Split the list in to two at the given position
(defun {split n l} {list (take n l) (drop n l)})

;; Conditionals ---------------------------------------------------------------

; define 'default'
(def {otherwise} #t)

; Evaluates a branch when the condition is met
(defun {select & cs}
  {if (nil? cs)
    {error "selection not found"}
    {if (fst (fst cs))
      {snd (fst cs)}
      {unpack select (tail cs)}
    }
  }
)

; C-like switch/case statement. Evaluate an expression
; if a constant value matches.
(defun {case x & cs}
  {if (nil? cs)
    {error "no case found"}
    {if (= x (fst (fst cs)))
      {snd (fst cs)}
      {unpack case (join (list x) (tail cs))}
    }
  }
)

;; Utilities ------------------------------------------------------------------

; Calls a function with the arguments reversed
(defun {flip f a b} {f b a})

; Composes a function
(defun {comp f g x} {f (g x)})

; Returns true if x is a member of q-expression y
(defun {member? x y}
  {if (nil? y)
    {#f}
    {if (= x (fst y))
      {#t}
      {member? x (tail y)}
    }
  }
)

; Calls a function with an argument
(defun {apply f a} {f a})

; Threading operator, pass first parameter through a sequence of functions
(defun {-> x & xs}
  {if (nil? xs)
    {x}
    {unpack -> (join (list (apply (eval (fst xs)) x)) (tail xs))}
  }
)

;; Unit testing ---------------------------------------------------------------

; Test a value and return a message if it does not match.
(defun {assert name f expected msg}
  {let
    {do
      (put {res} (f))
      (if (= res expected)
        {#t}
        {do
          (print (join "  " name ": " msg ". Expected") expected "actual" res)
          (#f)
        }
      )
    }
  }
)

; Executes a series of tests and prints out a
; summary of those succeeding and failing.
(defun {deftest x asserts}
  {let
    {do
      (put {runner}
        (\ {oks l}
          {if (nil? l)
            {oks}
            {if (fst l)
              {runner (+ 1 oks) (tail l)}
              {runner oks (tail l)}
            }
          }
        )
      )
      (put {test_ok} (runner 0 asserts))
      (print x "Succeeded:" test_ok "Failed:" (- (len asserts) test_ok))
    }
  }
)
